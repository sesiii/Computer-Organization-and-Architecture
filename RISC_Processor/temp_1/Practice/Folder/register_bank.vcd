$date
	Wed Oct 30 14:09:49 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module a $end
$var wire 1 ! clk $end
$var wire 32 " data_out2 [31:0] $end
$var wire 32 # data_out1 [31:0] $end
$var wire 32 $ alu_result [31:0] $end
$var reg 32 % counter [31:0] $end
$var reg 16 & display [15:0] $end
$var reg 1 ' display_lower_half $end
$var reg 4 ( opcode [3:0] $end
$var reg 32 ) output_display [31:0] $end
$var reg 4 * read_reg1 [3:0] $end
$var reg 4 + read_reg2 [3:0] $end
$var reg 32 , write_data [31:0] $end
$var reg 1 - write_enable $end
$var reg 4 . write_reg [3:0] $end
$scope module alu_unit $end
$var wire 4 / opcode [3:0] $end
$var wire 32 0 xor_result [31:0] $end
$var wire 32 1 sub_result [31:0] $end
$var wire 32 2 srl_result [31:0] $end
$var wire 32 3 sra_result [31:0] $end
$var wire 32 4 slt_result [31:0] $end
$var wire 32 5 sll_result [31:0] $end
$var wire 32 6 sgt_result [31:0] $end
$var wire 32 7 result [31:0] $end
$var wire 32 8 or_result [31:0] $end
$var wire 32 9 not_result [31:0] $end
$var wire 32 : nor_result [31:0] $end
$var wire 32 ; lui_result [31:0] $end
$var wire 32 < inc_result [31:0] $end
$var wire 32 = dec_result [31:0] $end
$var wire 32 > and_result [31:0] $end
$var wire 32 ? add_result [31:0] $end
$var wire 32 @ B [31:0] $end
$var wire 32 A A [31:0] $end
$scope module add $end
$var wire 32 B result [31:0] $end
$var wire 32 C B [31:0] $end
$var wire 32 D A [31:0] $end
$upscope $end
$scope module and_gate $end
$var wire 32 E result [31:0] $end
$var wire 32 F B [31:0] $end
$var wire 32 G A [31:0] $end
$upscope $end
$scope module dec $end
$var wire 32 H result [31:0] $end
$var wire 32 I A [31:0] $end
$upscope $end
$scope module inc $end
$var wire 32 J result [31:0] $end
$var wire 32 K A [31:0] $end
$upscope $end
$scope module lui $end
$var wire 32 L result [31:0] $end
$var wire 32 M B [31:0] $end
$upscope $end
$scope module nor_gate $end
$var wire 32 N result [31:0] $end
$var wire 32 O B [31:0] $end
$var wire 32 P A [31:0] $end
$upscope $end
$scope module not_gate $end
$var wire 32 Q result [31:0] $end
$var wire 32 R A [31:0] $end
$upscope $end
$scope module or_gate $end
$var wire 32 S result [31:0] $end
$var wire 32 T B [31:0] $end
$var wire 32 U A [31:0] $end
$upscope $end
$scope module sgt $end
$var wire 32 V result [31:0] $end
$var wire 32 W B [31:0] $end
$var wire 32 X A [31:0] $end
$upscope $end
$scope module sll $end
$var wire 32 Y result [31:0] $end
$var wire 32 Z B [31:0] $end
$var wire 32 [ A [31:0] $end
$upscope $end
$scope module slt $end
$var wire 32 \ result [31:0] $end
$var wire 32 ] B [31:0] $end
$var wire 32 ^ A [31:0] $end
$upscope $end
$scope module sra $end
$var wire 32 _ result [31:0] $end
$var wire 32 ` B [31:0] $end
$var wire 32 a A [31:0] $end
$upscope $end
$scope module srl $end
$var wire 32 b result [31:0] $end
$var wire 32 c B [31:0] $end
$var wire 32 d A [31:0] $end
$upscope $end
$scope module sub $end
$var wire 32 e result [31:0] $end
$var wire 32 f B [31:0] $end
$var wire 32 g A [31:0] $end
$upscope $end
$scope module xor_gate $end
$var wire 32 h result [31:0] $end
$var wire 32 i B [31:0] $end
$var wire 32 j A [31:0] $end
$upscope $end
$upscope $end
$scope module reg_bank $end
$var wire 1 k clk $end
$var wire 16 l output_display [15:0] $end
$var wire 4 m read_reg1 [3:0] $end
$var wire 4 n read_reg2 [3:0] $end
$var wire 32 o write_data [31:0] $end
$var wire 1 - write_enable $end
$var wire 4 p write_reg [3:0] $end
$var reg 32 q data_out1 [31:0] $end
$var reg 32 r data_out2 [31:0] $end
$var reg 16 s out_display_reg [15:0] $end
$upscope $end
$scope task display_output $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#30
$dumpvars
bx s
b1100100 r
b1010 q
b10 p
b1100100 o
b11 n
b1 m
bx l
zk
b1010 j
b1100100 i
b1101110 h
b1010 g
b1100100 f
b11111111111111111111111110100110 e
b1010 d
b1100100 c
b0 b
b1010 a
b1100100 `
b0 _
b1010 ^
b1100100 ]
b1 \
b1010 [
b1100100 Z
b0 Y
b1010 X
b1100100 W
b0 V
b1010 U
b1100100 T
b1101110 S
b1010 R
b11111111111111111111111111110101 Q
b1010 P
b1100100 O
b11111111111111111111111110010001 N
b1100100 M
b11001000000000000000000 L
b1010 K
b1110 J
b1010 I
b110 H
b1010 G
b1100100 F
b0 E
b1010 D
b1100100 C
b1101110 B
b1010 A
b1100100 @
b1101110 ?
b0 >
b110 =
b1110 <
b11001000000000000000000 ;
b11111111111111111111111110010001 :
b11111111111111111111111111110101 9
b1101110 8
b1101110 7
b0 6
b0 5
b1 4
b0 3
b0 2
b11111111111111111111111110100110 1
b1101110 0
b0 /
b10 .
0-
b1100100 ,
b11 +
b1 *
b1100100 )
b0 (
0'
bx &
b0 %
b1101110 $
b1010 #
b1100100 "
z!
$end
#40
b11111111111111111111111110000001 :
b11111111111111111111111110000001 N
b10110100000000000000000 ;
b10110100000000000000000 L
b110100 0
b110100 h
b0 4
b0 \
b1 6
b1 V
b1111110 8
b1111110 S
b11111111111111111111111110010001 9
b11111111111111111111111110010001 Q
b1001010 >
b1001010 E
b11001000 $
b11001000 7
b1011010 "
b1011010 @
b1011010 C
b1011010 F
b1011010 M
b1011010 O
b1011010 T
b1011010 W
b1011010 Z
b1011010 ]
b1011010 `
b1011010 c
b1011010 f
b1011010 i
b1011010 r
b10100 1
b10100 e
b1110010 <
b1110010 J
b1101010 =
b1101010 H
b11001000 ?
b11001000 B
b1101110 #
b1101110 A
b1101110 D
b1101110 G
b1101110 I
b1101110 K
b1101110 P
b1101110 R
b1101110 U
b1101110 X
b1101110 [
b1101110 ^
b1101110 a
b1101110 d
b1101110 g
b1101110 j
b1101110 q
b1001 +
b1001 n
b10 *
b10 m
b1101110 )
#50
b11111111111111111111111100100101 :
b11111111111111111111111100100101 N
b10010010 0
b10010010 h
b11011010 8
b11011010 S
b11111111111111111111111100110111 9
b11111111111111111111111100110111 Q
b1001000 >
b1001000 E
b1101110 $
b1101110 7
b1101110 1
b1101110 e
b11001100 <
b11001100 J
b11000100 =
b11000100 H
b100100010 ?
b100100010 B
b11001000 #
b11001000 A
b11001000 D
b11001000 G
b11001000 I
b11001000 K
b11001000 P
b11001000 R
b11001000 U
b11001000 X
b11001000 [
b11001000 ^
b11001000 a
b11001000 d
b11001000 g
b11001000 j
b11001000 q
b1 (
b1 /
b11001000 )
#60
b11111111111111111111111110000001 :
b11111111111111111111111110000001 N
b1001010 $
b1001010 7
b110100 0
b110100 h
b1111110 8
b1111110 S
b11111111111111111111111110010001 9
b11111111111111111111111110010001 Q
b1001010 >
b1001010 E
b10100 1
b10100 e
b1110010 <
b1110010 J
b1101010 =
b1101010 H
b11001000 ?
b11001000 B
b1101110 #
b1101110 A
b1101110 D
b1101110 G
b1101110 I
b1101110 K
b1101110 P
b1101110 R
b1101110 U
b1101110 X
b1101110 [
b1101110 ^
b1101110 a
b1101110 d
b1101110 g
b1101110 j
b1101110 q
b10 (
b10 /
b1101110 )
#70
b1011010 $
b1011010 7
b11111111111111111111111110100101 :
b11111111111111111111111110100101 N
b10000 0
b10000 h
b1 4
b1 \
b0 6
b0 V
b1011010 8
b1011010 S
b11111111111111111111111110110101 9
b11111111111111111111111110110101 Q
b11111111111111111111111111110000 1
b11111111111111111111111111110000 e
b1001110 <
b1001110 J
b1000110 =
b1000110 H
b10100100 ?
b10100100 B
b1001010 #
b1001010 A
b1001010 D
b1001010 G
b1001010 I
b1001010 K
b1001010 P
b1001010 R
b1001010 U
b1001010 X
b1001010 [
b1001010 ^
b1001010 a
b1001010 d
b1001010 g
b1001010 j
b1001010 q
b11 (
b11 /
b1001010 )
#80
b0 $
b0 7
b0 0
b0 h
b0 4
b0 \
b11111111111111111111111110100101 9
b11111111111111111111111110100101 Q
b1011010 >
b1011010 E
b0 1
b0 e
b1011110 <
b1011110 J
b1010110 =
b1010110 H
b10110100 ?
b10110100 B
b1011010 #
b1011010 A
b1011010 D
b1011010 G
b1011010 I
b1011010 K
b1011010 P
b1011010 R
b1011010 U
b1011010 X
b1011010 [
b1011010 ^
b1011010 a
b1011010 d
b1011010 g
b1011010 j
b1011010 q
b100 (
b100 /
b1011010 )
#90
b11111111111111111111111110100101 $
b11111111111111111111111110100101 7
b1011010 0
b1011010 h
b1 4
b1 \
b11111111111111111111111111111111 9
b11111111111111111111111111111111 Q
b0 >
b0 E
b11111111111111111111111110100110 1
b11111111111111111111111110100110 e
b100 <
b100 J
b11111111111111111111111111111100 =
b11111111111111111111111111111100 H
b1011010 ?
b1011010 B
b0 #
b0 A
b0 D
b0 G
b0 I
b0 K
b0 P
b0 R
b0 U
b0 X
b0 [
b0 ^
b0 a
b0 d
b0 g
b0 j
b0 q
b101 (
b101 /
b0 )
#100
b1011010 $
b1011010 7
b0 :
b0 N
b11111111111111111111111111111111 0
b11111111111111111111111111111111 h
b0 4
b0 \
b1 6
b1 V
b11111111111111111111111111111111 8
b11111111111111111111111111111111 S
b1011010 9
b1011010 Q
b11111111111111111111111101001011 1
b11111111111111111111111101001011 e
b11111111111111111111111110101001 <
b11111111111111111111111110101001 J
b11111111111111111111111110100001 =
b11111111111111111111111110100001 H
b11111111111111111111111111111111 ?
b11111111111111111111111111111111 B
b11111111111111111111111110100101 #
b11111111111111111111111110100101 A
b11111111111111111111111110100101 D
b11111111111111111111111110100101 G
b11111111111111111111111110100101 I
b11111111111111111111111110100101 K
b11111111111111111111111110100101 P
b11111111111111111111111110100101 R
b11111111111111111111111110100101 U
b11111111111111111111111110100101 X
b11111111111111111111111110100101 [
b11111111111111111111111110100101 ^
b11111111111111111111111110100101 a
b11111111111111111111111110100101 d
b11111111111111111111111110100101 g
b11111111111111111111111110100101 j
b11111111111111111111111110100101 q
b110 (
b110 /
b11111111111111111111111110100101 )
#110
b0 $
b0 7
b11111111111111111111111110100101 :
b11111111111111111111111110100101 N
b0 0
b0 h
b0 6
b0 V
b1011010 8
b1011010 S
b11111111111111111111111110100101 9
b11111111111111111111111110100101 Q
b1011010 >
b1011010 E
b0 1
b0 e
b1011110 <
b1011110 J
b1010110 =
b1010110 H
b10110100 ?
b10110100 B
b1011010 #
b1011010 A
b1011010 D
b1011010 G
b1011010 I
b1011010 K
b1011010 P
b1011010 R
b1011010 U
b1011010 X
b1011010 [
b1011010 ^
b1011010 a
b1011010 d
b1011010 g
b1011010 j
b1011010 q
b111 (
b111 /
b1011010 )
#120
b1011010 0
b1011010 h
b1 4
b1 \
b11111111111111111111111111111111 9
b11111111111111111111111111111111 Q
b0 >
b0 E
b11111111111111111111111110100110 1
b11111111111111111111111110100110 e
b100 <
b100 J
b11111111111111111111111111111100 =
b11111111111111111111111111111100 H
b1011010 ?
b1011010 B
b0 #
b0 A
b0 D
b0 G
b0 I
b0 K
b0 P
b0 R
b0 U
b0 X
b0 [
b0 ^
b0 a
b0 d
b0 g
b0 j
b0 q
b0 )
